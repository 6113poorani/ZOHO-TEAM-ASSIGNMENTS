/*Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.*/

class Solution {
    public int[][] merge(int[][] in) {
        Arrays.sort(in, (a, b) -> Integer.compare(a[0], b[0]));
        List<int[]> l=new ArrayList<>();
        int n=in.length;
    int k1=in[0][0],k2=in[0][1];
    for(int i=1;i<n;i++){
        if(k2>=in[i][0]){
           
            k2=Math.max(k2,in[i][1]);
            continue;
        }
        else{
            l.add(new int[]{k1,k2});
            k1=in[i][0];
            k2=in[i][1];
        }
    }
    l.add(new int[]{k1,k2});
    int[][] a=new int[l.size()][2];
    int ind=0;
    for(var i:l){
        a[ind++]=i;
    }
    return a;
    }
}
